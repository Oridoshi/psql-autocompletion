{
    "Génère une Function": {
        "prefix": "function",
        "body": [
            "CREATE OR REPLACE FUNCTION nomFonction(/*paramettre fonction*/) RETURNS /*faire info_function pour plus d'info sur le returns*/ AS",
            "$$",
            "DECLARE",
            "    -- Variables et declarations ici",
            "BEGIN",
            "    -- Corps de la Fonction ici",
            "END;",
            "$$ LANGUAGE SQL; -- ne pas oublier de mettre PLPGSQL si c'est une fonction PLPGSQL"
        ],
        "description": "Génère une Fonction SQL"
    },

    "Génère un Trigger Insertion": {
        "prefix": "trigins",
        "body": [
            "CREATE FUNCTION nomFonction(/*paramettre fonction*/) RETURNS TRIGGER AS",
            "$$",
            "DECLARE",
            "    -- Variables et declarations ici",
            "BEGIN",
            "    -- Corps de la Fonction ici",
            "    RETURN NULL;",
            "END;",
            "$$ LANGUAGE plpgsql;",
            "",
            "CREATE TRIGGER nomTrigger",
            "AFTER INSERT ON /*Table*/",
            "FOR EACH STATEMENT --( ligne modifier ) ou ROW ( chaque ligne même non modifier )",
            "EXECUTE PROCEDURE nomFonction();"
        ],
        "description": "Génère un Trigger Insertion SQL"
    },

    "Génère un Trigger Update": {
        "prefix": "trigupda",
        "body": [
            "CREATE FUNCTION nomFonction(/*paramettre fonction*/) RETURNS TRIGGER AS",
            "$$",
            "DECLARE",
            "    -- Variables et declarations ici",
            "BEGIN",
            "    -- Corps de la Fonction ici",
            "    RETURN NULL;",
            "END;",
            "$$ LANGUAGE plpgsql;",
            "",
            "CREATE TRIGGER nomTrigger",
            "BEFORE UPDATE ON /*Table*/",
            "FOR EACH STATEMENT --( ligne modifier ) ou ROW ( chaque ligne même non modifier )",
            "EXECUTE PROCEDURE nomFonction();"
        ],
        "description": "Génère un Trigger Update SQL"
    },

    "Génère un Trigger Delete": {
        "prefix": "trigdel",
        "body": [
            "CREATE FUNCTION nomFonction(/*paramettre fonction*/) RETURNS TRIGGER AS",
            "$$",
            "DECLARE",
            "    -- Variables et declarations ici",
            "BEGIN",
            "    -- Corps de la Fonction ici",
            "    RETURN NULL;",
            "END;",
            "$$ LANGUAGE plpgsql;",
            "",
            "CREATE TRIGGER nomTrigger",
            "BEFORE DELETE ON /*Table*/",
            "FOR EACH STATEMENT --( ligne modifier ) ou ROW ( chaque ligne même non modifier )",
            "EXECUTE PROCEDURE nomFonction();"
        ],
        "description": "Génère un Trigger Delete SQL"
    },

    "Génère une Table SQL": {
        "prefix": "createtable",
        "body": [
            "CREATE TABLE nomTable (",
            "    id SERIAL PRIMARY KEY,",
            "    /*var1 type1*/,",
            "    /*var2 type2*/,",
            "    /*var3 type3*/",
            ");"
        ],
        "description": "Génère une déclaration de création de table SQL"
    },

    "Génère l'entête": {
        "prefix": "entete",
        "body": [
            "---------------------------------------------------------",
            "-- CAS : ????????????                                  --",
            "-- Auteur : Dunet Tom                                  --",
            "-- Date : ???????????                                  --",    
            "-- Objectif : ???????                                  --",
            "---------------------------------------------------------"
        ],
        "description": "Génère l'entête"
    },

    "Génère des Informations sur la Création de Table SQL": {
        "prefix": "info_CreationTable",
        "body": [
            "-----------------------------------------------------------------------------------",
            "--                  INFORMATIONS SUR LA CRÉATION DE TABLE                        --",
            "-----------------------------------------------------------------------------------",
            "--",
            "-- Lors de la création d'une table en SQL, vous pouvez spécifier divers éléments :",
            "--",
            "-- 1. Liste des colonnes de la table avec leurs noms et types de données.",
            "--    Exemple :",
            "--    nomColonne1 TYPE_DE_DONNÉES,",
            "--    nomColonne2 TYPE_DE_DONNÉES,",
            "--    ...",
            "--",
            "-- 2. Contraintes de clé primaire, clé étrangère, contraintes uniques, etc.",
            "--    Exemple :",
            "--    PRIMARY KEY (nomColonne1),",
            "--    FOREIGN KEY (nomColonne2) REFERENCES autreTable (colonneRéférencée),",
            "--    UNIQUE (nomColonne3),",
            "--    ...",
            "--",
            "-- 3. Options de colonne telles que NOT NULL, DEFAULT, CHECK, etc.",
            "--    Exemple :",
            "--    nomColonne4 TYPE_DE_DONNÉES NOT NULL,",
            "--    nomColonne5 TYPE_DE_DONNÉES DEFAULT 'valeurParDéfaut',",
            "--    nomColonne6 TYPE_DE_DONNÉES CHECK (condition),",
            "--    ...",
            "--",
            "-- 4. Options de table comme le schéma, l'héritage, le stockage, etc.",
            "--    Exemple :",
            "--    TABLESPACE espaceStockage,",
            "--    INHERITS autreTable,",
            "--    ...",
            "--",
            "-- 5. Options de contrainte de table pour spécifier des règles de vérification.",
            "--    Exemple :",
            "--    CHECK (conditionDeVérification),",
            "--    ...",
            "--",
            "-- 6. Commentaires pour documenter la table et ses colonnes.",
            "--    Exemple :",
            "--    COMMENT ON TABLE nomTable IS 'Description de la table';",
            "--    COMMENT ON COLUMN nomTable.nomColonne1 IS 'Description de la colonne';",
            "--    ...",
            "--",
            "-----------------------------------------------------------------------------------"
        ],
        "description": "Explique les options de création de table SQL"
    },

    "Génère un Trigger et Utilisation": {
        "prefix": "info_trigger",
        "body": [
            "-----------------------------------------------------------------------------------",
            "--                          CRÉATION D'UN TRIGGER                                --",
            "-----------------------------------------------------------------------------------",
            "--",
            "-- 1. Créez d'abord une fonction PL/pgSQL qui définira le comportement du trigger.",
            "--",
            "-- CREATE FUNCTION nomFonction(/*paramètres*/) RETURNS TRIGGER AS",
            "-- $$",
            "-- BEGIN",
            "--     -- Corps de la Fonction ici",
            "--     -- Utilisez les variables OLD et NEW pour accéder aux anciennes et nouvelles valeurs",
            "--     -- RETURN NEW;  -- Par exemple, pour un trigger BEFORE INSERT qui modifie les données",
            "-- END;",
            "-- $$ LANGUAGE plpgsql;",
            "--",
            "-- 2. Créez le trigger lui-même en spécifiant l'événement, le moment et la table cible.",
            "--",
            "-- CREATE TRIGGER nomTrigger",
            "-- AFTER INSERT OR UPDATE ON nomTable",
            "-- FOR EACH ROW",
            "-- EXECUTE PROCEDURE nomFonction();",
            "--",
            "-- Vous pouvez utiliser \"BEFORE\" ou \"AFTER\" en fonction de votre besoin",
            "-- \"DELETE\", \"UPDATE\" et \"INSERT\" en fonction aussi en fonction de votre besoin",
            "-- Vous pouvez ajouter \"OR\" si vous vouler que ce ce face sur plusieur action",
            "--",
            "-----------------------------------------------------------------------------------",
            "--                          UTILISATION DU TRIGGER                               --",
            "-----------------------------------------------------------------------------------",
            "--",
            "-- Pour utiliser le trigger, insérez ou mettez à jour des données dans nomTable.",
            "-- Le trigger s'exécutera automatiquement après chaque opération d'INSERT ou UPDATE.",
            "--",
            "-- Exemple d'insertion de données :",
            "--",
            "-- INSERT INTO nomTable (/*colonnes*/) VALUES (/*valeurs*/);",
            "--",
            "-- Le trigger nomTrigger sera déclenché après cette opération, exécutant la fonction nomFonction.",
            "--",
            "-----------------------------------------------------------------------------------"
        ],
        "description": "Génère les info pour faire des trigger"
    },

    "Génère info fonction": {
        "prefix": "info_fonction",
        "body": [
            "-----------------------------------------------------------------------------------",
            "--                                     TESTS                                     --",
            "-----------------------------------------------------------------------------------",
            "--                     Select * From NOM_FONCTION(PARAMETTRE)                    --",
            "--                      Permet un affichage comme une table                      --",
            "-----------------------------------------------------------------------------------",
            "--                        Select NOM_FONCTION(PARAMETTRE)                        --",
            "--              Affichage avec seulement avec le nom de la fonction              --",
            "-----------------------------------------------------------------------------------",
            "",
            "",
            "-----------------------------------------------------------------------------------",
            "--                                    Returns                                    --",
            "-----------------------------------------------------------------------------------",
            "-- Pour les nombre il y a :                                                      --",
            "--    • int                                                                      --",
            "--    • numeric                                                                  --",
            "--    • bigint                                                                   --",
            "-----------------------------------------------------------------------------------",
            "-- Pour les chaine de caractère il y a :                                         --",
            "--    • varchar                                                                  --",
            "-----------------------------------------------------------------------------------",
            "--              Pour tout les colonne d'une table ont utilise setof              --",
            "--               si ont fait un setOf Produit le résultat seras le               --",
            "--              même que si l'on avait fait un select * from Produit             --",
            "--                                                                               --",
            "--              Il est aussi possible de créer un type avec la ligne             --",
            "--               CREATE TYPE nomType AS(var1 type1, var2 type2,...)              --",
            "--                            et de setOf ce type crée                           --",
            "-----------------------------------------------------------------------------------",
            "--              table.var%TYPE vas tout seul aller chercher le type              --",
            "--                  et le mettre comme type de la chose renvoyer                 --",
            "-----------------------------------------------------------------------------------",
            "",
            "",
            "-----------------------------------------------------------------------------------",
            "--                                    Exemple                                    --",
            "-----------------------------------------------------------------------------------",
            "-- Create or Replace Function Client_Coul( numcli int, coul varchar) returns int --",
            "-- as                                                                            --",
            "-- $$                                                                            --",
            "--     Select count(p.*)                                                         --",
            "--     from   Achat a join Produit p on a.np = p.np                              --",
            "--     where  ncli = numcli and p.coul = Client_Coul.coul                        --",
            "-- $$ LANGUAGE SQL;                                                              --",
            "-----------------------------------------------------------------------------------"
        ],
        "description": "Génère les info pour utiliser les fonction"
    },

    "Génère info PSQL": {
        "prefix": "info_psql",
        "body": [
            "---------------------------------------------------------",
            "--                 Affichage info psql                 --",
            "---------------------------------------------------------",
            "--  \\dt permet d'afficher les table    crée sur psql   --",
            "--  \\df permet d'afficher les fonction crée sur psql   --",
            "--  \\dv permet d'afficher les vue      crée sur psql   --",
            "---------------------------------------------------------"
        ],
        "description": "Génère les info pour utiliser les fonction"
    },

    "Génère info select complet": {
        "prefix": "info_selcom",
        "body": [
            "SELECT   /* * (selection tout les tuple de la table) ou nom colonne tables suivi par une \",\" (arg1, arg2, ...)*/",
            "FROM     /*nomTable*/",
            "WHERE    /*Condition de la demande*/",
            "GROUP BY /*Groupe en fonction de l'attribue passer*/",
            "HAVING   /*Condition de la demande mais utilisant des fonction comme le COUNT() ou le MAX()*/;"
        ],
        "description": "Génère les info d'un select complet"
    },

    "Génère select complet": {
        "prefix": "selcom",
        "body": [
            "SELECT   ",
            "FROM     ",
            "WHERE    ",
            "GROUP BY ",
            "HAVING   ;"
        ],
        "description": "Génère les info d'un select complet"
    },

    "Génère select join": {
        "prefix": "seljoi",
        "body": [
            "SELECT ",
            "FROM   /*nomTable1 nt1*/ JOIN /*nomTable2 nt2*/ ON /*nt1.id*/ = /*nt2.id*/"
        ],
        "description": "Génère un select avec une jointure"
    },

    "Génère where IN": {
        "prefix": "wherein",
        "body": [
            "WHERE /*arg*/ IN (SELECT /*typeArg*/",
            "              FROM   /*nomTable*/",
            "              WHERE  /*condition*/);"
        ],
        "description": "Génère where avec un IN"
    },

    "Génère vue": {
        "prefix": "view",
        "body": [
            "CREATE OR REPLACE nomVue AS",
            "SELECT   ",
            "FROM     ",
            "WHERE    ",
            "GROUP BY ",
            "HAVING   ;"
        ],
        "description": "Génère une vue"
    },

    "Génère Fonction RAISE NOTICE": {
        "prefix": "funRaiNot",
        "body": [
            "CREATE OR REPLACE FUNCTION nomFonction(mess varchar) RETURNS void AS",
            "$$",
            "BEGIN",
            "    RAISE NOTICE '%s', mess; -- Utiliser '%s' pour insérée la variable mess dans le message du raise notice",
            "    RETURN NULL;",
            "END;",
            "$$ LANGUAGE plpgsql;",
            "",
            "SELECT nomFonction('MESSAGE A AFFICHER'); -- Utiliser SELECT pour appeler la fonction ou EXECUTE celon le besoin"
        ],
        "description": "Génère une Fonction RAISE NOTICE"
    },

    "Génère RAISE NOTICE": {
        "prefix": "rainot",
        "body": [
            "RAISE NOTICE '%s', mess; -- Utiliser '%s' pour insérée la variable mess dans le message du raise notice"
        ],
        "description": "Génère un RAISE NOTICE"
    },

    "Génère RAISE EXEPTION": {
        "prefix": "raiexep",
        "body": [
            "RAISE EXEPTION \"MESSAGE ERREUR\";"
        ],
        "description": "Génère un RAISE EXEPTION"
    },

    "Génère FOR LOOP": {
        "prefix": "forloop",
        "body": [
            "FOR ( /*var*/ IN SELECT /*arg*/ From /table*/ Where /*condition*/ )",
            "    LOOP",
            "        /*code éxécuter par la boucle*/",
            "    END LOOP;"
        ],
        "description": "Génère une boucle for"
    },

    "Génère TYPE": {
        "prefix": "creatype",
        "body": [
            "CREATE TYPE nomType AS(/*var1 type1, var2 type2, ...*/)"
        ],
        "description": "Génère la ligne pour crée un nouveaux type"
    },

    "Génère Insert Into": {
        "prefix": "insint",
        "body": [
            "SELECT /*arg*/ INTO /*var*/ FROM /*table*/ WHERE /*condition*/"
        ],
        "description": "Génère la ligne pour faire un INSERT INTO pour mettre dans une variable"
    },

    "Génère une requête DELETE": {
        "prefix": "del",
        "body": [
            "DELETE FROM /*nomTable*/ WHERE /*condition*/;"
        ],
        "description": "Génère une requête DELETE SQL"
    },

    "Génère des clauses ORDER BY": {
        "prefix": "orderby",
        "body": [
            "ORDER BY /*colonne1*/, /*colonne2*/ /*ordre (ASC ou DESC)*/;"
        ],
        "description": "Génère des clauses ORDER BY SQL"
    },

    "Génère une requête INSERT INTO": {
        "prefix": "insertinto",
        "body": [
            "INSERT INTO /*nomTable*/ (/*colonnes*/) VALUES" ,
            "(/*valeur*/)",
            "(/*valeur*/);"
        ],
        "description": "Génère une requête INSERT INTO SQL"
    },

    "Génère FOUND": {
        "prefix": "found",
        "body": [
            "-- Vérification si la chose demander existe",
            "SELECT /*arg1, arg2 , ...*/ INTO /*var1, var2 , ...*/ FROM /*Table*/ WHERE /*Condition*/",
            "",
            "IF FOUND THEN",
            "    -- c'est trouver",
            "    RAISE NOTICE 'message';",
            "ELSE",
            "    -- ce n'est pas trouver",
            "    RAISE NOTICE 'message de pas trouver';",
            "END IF;"
        ],
        "description": "Génère une demande found"
    }
}